#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SenseNet.Notification
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SenseNetContentRepository")]
	internal partial class NotificationsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertLastProcessTime(LastProcessTime instance);
    partial void UpdateLastProcessTime(LastProcessTime instance);
    partial void DeleteLastProcessTime(LastProcessTime instance);
    partial void InsertSynchronization(Synchronization instance);
    partial void UpdateSynchronization(Synchronization instance);
    partial void DeleteSynchronization(Synchronization instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertSubscription(Subscription instance);
    partial void UpdateSubscription(Subscription instance);
    partial void DeleteSubscription(Subscription instance);
    #endregion
		
		public NotificationsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NotificationsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NotificationsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NotificationsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		internal System.Data.Linq.Table<LastProcessTime> LastProcessTimes
		{
			get
			{
				return this.GetTable<LastProcessTime>();
			}
		}
		
		internal System.Data.Linq.Table<Synchronization> Synchronizations
		{
			get
			{
				return this.GetTable<Synchronization>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Subscription> Subscriptions
		{
			get
			{
				return this.GetTable<Subscription>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Notification.Events]")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private string _ContentPath;
		
		private int _CreatorId;
		
		private int _NotificationTypeId;
		
		private System.DateTime _When;
		
		private int _LastModifierId;
		
		private string _Who;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnContentPathChanging(string value);
    partial void OnContentPathChanged();
    partial void OnCreatorIdChanging(int value);
    partial void OnCreatorIdChanged();
    partial void OnNotificationTypeIdChanging(int value);
    partial void OnNotificationTypeIdChanged();
    partial void OnWhenChanging(System.DateTime value);
    partial void OnWhenChanged();
    partial void OnLastModifierIdChanging(int value);
    partial void OnLastModifierIdChanged();
    partial void OnWhoChanging(string value);
    partial void OnWhoChanged();
    #endregion
		
		public Event()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		internal int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentPath", DbType="NVarChar(450) NOT NULL", CanBeNull=false)]
		public string ContentPath
		{
			get
			{
				return this._ContentPath;
			}
			set
			{
				if ((this._ContentPath != value))
				{
					this.OnContentPathChanging(value);
					this.SendPropertyChanging();
					this._ContentPath = value;
					this.SendPropertyChanged("ContentPath");
					this.OnContentPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorId", DbType="Int NOT NULL")]
		public int CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationTypeId", DbType="Int NOT NULL")]
		public int NotificationTypeId
		{
			get
			{
				return this._NotificationTypeId;
			}
			set
			{
				if ((this._NotificationTypeId != value))
				{
					this.OnNotificationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationTypeId = value;
					this.SendPropertyChanged("NotificationTypeId");
					this.OnNotificationTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[When]", Storage="_When", DbType="DateTime NOT NULL")]
		public System.DateTime When
		{
			get
			{
				return this._When;
			}
			set
			{
				if ((this._When != value))
				{
					this.OnWhenChanging(value);
					this.SendPropertyChanging();
					this._When = value;
					this.SendPropertyChanged("When");
					this.OnWhenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifierId", DbType="Int NOT NULL")]
		public int LastModifierId
		{
			get
			{
				return this._LastModifierId;
			}
			set
			{
				if ((this._LastModifierId != value))
				{
					this.OnLastModifierIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifierId = value;
					this.SendPropertyChanged("LastModifierId");
					this.OnLastModifierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Who", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Who
		{
			get
			{
				return this._Who;
			}
			set
			{
				if ((this._Who != value))
				{
					this.OnWhoChanging(value);
					this.SendPropertyChanging();
					this._Who = value;
					this.SendPropertyChanged("Who");
					this.OnWhoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Notification.LastProcessTime]")]
	internal partial class LastProcessTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _Immediately;
		
		private System.Nullable<System.DateTime> _Daily;
		
		private System.Nullable<System.DateTime> _Weekly;
		
		private System.Nullable<System.DateTime> _Monthly;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImmediatelyChanging(System.Nullable<System.DateTime> value);
    partial void OnImmediatelyChanged();
    partial void OnDailyChanging(System.Nullable<System.DateTime> value);
    partial void OnDailyChanged();
    partial void OnWeeklyChanging(System.Nullable<System.DateTime> value);
    partial void OnWeeklyChanged();
    partial void OnMonthlyChanging(System.Nullable<System.DateTime> value);
    partial void OnMonthlyChanged();
    #endregion
		
		public LastProcessTime()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Immediately", DbType="DateTime")]
		public System.Nullable<System.DateTime> Immediately
		{
			get
			{
				return this._Immediately;
			}
			set
			{
				if ((this._Immediately != value))
				{
					this.OnImmediatelyChanging(value);
					this.SendPropertyChanging();
					this._Immediately = value;
					this.SendPropertyChanged("Immediately");
					this.OnImmediatelyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Daily", DbType="DateTime")]
		public System.Nullable<System.DateTime> Daily
		{
			get
			{
				return this._Daily;
			}
			set
			{
				if ((this._Daily != value))
				{
					this.OnDailyChanging(value);
					this.SendPropertyChanging();
					this._Daily = value;
					this.SendPropertyChanged("Daily");
					this.OnDailyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weekly", DbType="DateTime")]
		public System.Nullable<System.DateTime> Weekly
		{
			get
			{
				return this._Weekly;
			}
			set
			{
				if ((this._Weekly != value))
				{
					this.OnWeeklyChanging(value);
					this.SendPropertyChanging();
					this._Weekly = value;
					this.SendPropertyChanged("Weekly");
					this.OnWeeklyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monthly", DbType="DateTime")]
		public System.Nullable<System.DateTime> Monthly
		{
			get
			{
				return this._Monthly;
			}
			set
			{
				if ((this._Monthly != value))
				{
					this.OnMonthlyChanging(value);
					this.SendPropertyChanging();
					this._Monthly = value;
					this.SendPropertyChanged("Monthly");
					this.OnMonthlyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Notification.Synchronization]")]
	internal partial class Synchronization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LockName;
		
		private bool _Locked;
		
		private System.DateTime _LockedUntil;
		
		private string _ComputerName;
		
		private string _LockId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLockNameChanging(string value);
    partial void OnLockNameChanged();
    partial void OnLockedChanging(bool value);
    partial void OnLockedChanged();
    partial void OnLockedUntilChanging(System.DateTime value);
    partial void OnLockedUntilChanged();
    partial void OnComputerNameChanging(string value);
    partial void OnComputerNameChanged();
    partial void OnLockIdChanging(string value);
    partial void OnLockIdChanged();
    #endregion
		
		public Synchronization()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockName", DbType="NVarChar(200) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LockName
		{
			get
			{
				return this._LockName;
			}
			set
			{
				if ((this._LockName != value))
				{
					this.OnLockNameChanging(value);
					this.SendPropertyChanging();
					this._LockName = value;
					this.SendPropertyChanged("LockName");
					this.OnLockNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locked", DbType="Bit NOT NULL")]
		public bool Locked
		{
			get
			{
				return this._Locked;
			}
			set
			{
				if ((this._Locked != value))
				{
					this.OnLockedChanging(value);
					this.SendPropertyChanging();
					this._Locked = value;
					this.SendPropertyChanged("Locked");
					this.OnLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockedUntil", DbType="DateTime NOT NULL")]
		public System.DateTime LockedUntil
		{
			get
			{
				return this._LockedUntil;
			}
			set
			{
				if ((this._LockedUntil != value))
				{
					this.OnLockedUntilChanging(value);
					this.SendPropertyChanging();
					this._LockedUntil = value;
					this.SendPropertyChanged("LockedUntil");
					this.OnLockedUntilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputerName", DbType="NVarChar(200)")]
		public string ComputerName
		{
			get
			{
				return this._ComputerName;
			}
			set
			{
				if ((this._ComputerName != value))
				{
					this.OnComputerNameChanging(value);
					this.SendPropertyChanging();
					this._ComputerName = value;
					this.SendPropertyChanged("ComputerName");
					this.OnComputerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockId", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string LockId
		{
			get
			{
				return this._LockId;
			}
			set
			{
				if ((this._LockId != value))
				{
					this.OnLockIdChanging(value);
					this.SendPropertyChanging();
					this._LockId = value;
					this.SendPropertyChanged("LockId");
					this.OnLockIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Notification.Messages]")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageId;
		
		private string _Address;
		
		private string _Subject;
		
		private string _Body;
		
		private string _LockId;
		
		private System.Nullable<System.DateTime> _LockedUntil;
		
		private string _SenderAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnLockIdChanging(string value);
    partial void OnLockIdChanged();
    partial void OnLockedUntilChanging(System.Nullable<System.DateTime> value);
    partial void OnLockedUntilChanged();
    partial void OnSenderAddressChanging(string value);
    partial void OnSenderAddressChanged();
    #endregion
		
		public Message()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		internal int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockId", DbType="NVarChar(500)")]
		public string LockId
		{
			get
			{
				return this._LockId;
			}
			set
			{
				if ((this._LockId != value))
				{
					this.OnLockIdChanging(value);
					this.SendPropertyChanging();
					this._LockId = value;
					this.SendPropertyChanged("LockId");
					this.OnLockIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockedUntil", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockedUntil
		{
			get
			{
				return this._LockedUntil;
			}
			set
			{
				if ((this._LockedUntil != value))
				{
					this.OnLockedUntilChanging(value);
					this.SendPropertyChanging();
					this._LockedUntil = value;
					this.SendPropertyChanged("LockedUntil");
					this.OnLockedUntilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderAddress", DbType="NVarChar(250)")]
		public string SenderAddress
		{
			get
			{
				return this._SenderAddress;
			}
			set
			{
				if ((this._SenderAddress != value))
				{
					this.OnSenderAddressChanging(value);
					this.SendPropertyChanging();
					this._SenderAddress = value;
					this.SendPropertyChanged("SenderAddress");
					this.OnSenderAddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Notification.Subscriptions]")]
	public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubscriptionId;
		
		private string _UserEmail;
		
		private string _UserPath;
		
		private int _UserId;
		
		private string _UserName;
		
		private string _ContentPath;
		
		private int _FrequencyId;
		
		private string _Language;
		
		private byte _Active;
		
		private string _SitePath;
		
		private string _SiteUrl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(int value);
    partial void OnSubscriptionIdChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserPathChanging(string value);
    partial void OnUserPathChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnContentPathChanging(string value);
    partial void OnContentPathChanged();
    partial void OnFrequencyIdChanging(int value);
    partial void OnFrequencyIdChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnSitePathChanging(string value);
    partial void OnSitePathChanged();
    partial void OnSiteUrlChanging(string value);
    partial void OnSiteUrlChanged();
    #endregion
		
		public Subscription()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		internal int SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPath", DbType="NVarChar(450) NOT NULL", CanBeNull=false)]
		public string UserPath
		{
			get
			{
				return this._UserPath;
			}
			set
			{
				if ((this._UserPath != value))
				{
					this.OnUserPathChanging(value);
					this.SendPropertyChanging();
					this._UserPath = value;
					this.SendPropertyChanged("UserPath");
					this.OnUserPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentPath", DbType="NVarChar(450) NOT NULL", CanBeNull=false)]
		public string ContentPath
		{
			get
			{
				return this._ContentPath;
			}
			set
			{
				if ((this._ContentPath != value))
				{
					this.OnContentPathChanging(value);
					this.SendPropertyChanging();
					this._ContentPath = value;
					this.SendPropertyChanged("ContentPath");
					this.OnContentPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrequencyId", DbType="Int NOT NULL")]
		internal int FrequencyId
		{
			get
			{
				return this._FrequencyId;
			}
			set
			{
				if ((this._FrequencyId != value))
				{
					this.OnFrequencyIdChanging(value);
					this.SendPropertyChanging();
					this._FrequencyId = value;
					this.SendPropertyChanged("FrequencyId");
					this.OnFrequencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SitePath", DbType="NVarChar(450)")]
		public string SitePath
		{
			get
			{
				return this._SitePath;
			}
			set
			{
				if ((this._SitePath != value))
				{
					this.OnSitePathChanging(value);
					this.SendPropertyChanging();
					this._SitePath = value;
					this.SendPropertyChanged("SitePath");
					this.OnSitePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteUrl", DbType="NVarChar(200)")]
		public string SiteUrl
		{
			get
			{
				return this._SiteUrl;
			}
			set
			{
				if ((this._SiteUrl != value))
				{
					this.OnSiteUrlChanging(value);
					this.SendPropertyChanging();
					this._SiteUrl = value;
					this.SendPropertyChanged("SiteUrl");
					this.OnSiteUrlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
